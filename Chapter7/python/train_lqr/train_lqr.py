# -*- coding: utf-8 -*-
"""train_lqr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Eczp7Nq1FTMep8xLMYPGxksBhHbebzFQ
"""

import numpy as np
from scipy.linalg import solve_continuous_are
import control

# State variable
A = np.array([
    [0, 0, 0, 0, 1, -1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, -1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, -1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, -1, 0],
    [-12.5, 0, 0, 0, -0.75, 0.75, 0, 0, 0, 0],
    [62.5, -62.5, 0, 0, 3.75, -7.5, 3.75, 0, 0, 0],
    [0, 62.5, -62.5, 0, 0, 3.75, -7.5, 3.75, 0, 0],
    [0, 0, 62.5, -62.5, 0, 0, 3.75, -7.5, 3.75, 0],
    [0, 0, 0, 62.5, 0, 0, 0, 3.75, -3.75, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, -1/40]
])

B = np.array([0, 0, 0, 0, 0.005, 0, 0, 0, 0, 0])[:, np.newaxis]  # Force input

Q = np.diag([3.34**2, 3.34**2, 3.34**2, 3.34**2, 3**2+0.5**2, 2*3**2, 2*3**2, 2*3**2, 3**2, 0.5**2])
Q[5, 4] = Q[4, 5] = -9
Q[6, 5] = Q[5, 6] = -9
Q[7, 6] = Q[6, 7] = -9
Q[8, 7] = Q[7, 8] = -9
Q[9, 4] = Q[4, 9] = 0.5**2

R = 1 / 120**2

# Calculate LQR gain
K, S, E = control.lqr(A, B, Q, R)

R1 = 35 * R

# Calculate LQR gain with modified R
K1, S1, E1 = control.lqr(A, B, Q, R1)

print("LQR gain K:")
print(K)

print("\nLQR gain K1 with modified R:")
print(K1)