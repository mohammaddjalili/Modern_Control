# -*- coding: utf-8 -*-
"""inverted_pendulum_k2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d30XrhU8Du5hW2s6wS84jjVjz92XJbgJ
"""

import numpy as np

def inverted_pendulum_k2(t, x):
    # Constants
    g = 9.8
    l = 1
    m = 1
    M = 1

    # State feedback gains
    k = np.array([-40.0000, -37.3693, -190.6669, -54.7283])

    # Intermediate calculations
    d1 = M + m * (1 - np.cos(x[2]) ** 2)
    d2 = l * d1

    # State feedback
    F = -np.dot(k, x)

    # State derivatives
    xp = np.zeros(4)
    xp[0] = x[1]
    xp[1] = (F + m * l * x[3] ** 2 * np.sin(x[2]) - m * g * np.sin(x[2]) * np.cos(x[2])) / d1
    xp[2] = x[3]
    xp[3] = (-F * np.cos(x[2]) - m * l * x[3] ** 2 * np.sin(x[2]) * np.cos(x[2]) + (M + m) * g * np.sin(x[2])) / d2

    return xp